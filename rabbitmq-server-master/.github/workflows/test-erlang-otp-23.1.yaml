name: Test - Erlang 23.1
on: push
jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    outputs:
      build_start: ${{ steps.buildevents.outputs.build_start }}
      branch_or_tag_name: ${{ steps.buildevents.outputs.branch_or_tag_name }}
    steps:
    - name: RECORD BUILD START
      id: buildevents
      run: |
        echo "::set-output name=build_start::$(date +%s)"
        branch_or_tag_name=${GITHUB_REF#refs/*/}
        echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: eu.gcr.io
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
    - name: PREPARE BUILD IMAGE
      uses: docker/build-push-action@v2
      with:
        load: true
        file: ci/dockerfiles/ci
        tags: eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }}
        build-args: |
          ERLANG_VERSION=23.1
          GITHUB_RUN_ID=${{ github.run_id }}
          BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }}
          GITHUB_SHA=${{ github.sha }}
          base_rmq_ref=master
          current_rmq_ref=${{ steps.buildevents.outputs.branch_or_tag_name }}
          RABBITMQ_VERSION=3.9.0
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: SAVE CI DOCKER IMAGE IN CACHE
      run: |
        docker save --output ci.tar eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }}
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RECORD STEP FINISH
      run: |
        docker run \
          --env project=prepare \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.build_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/collect.sh
  xref:
    name: xref
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD XREF START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: eu.gcr.io
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
    - name: PULL IMAGE
      run: |
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.1
    - name: RUN XREF rabbit_common
      run: |
        docker run \
          --env project=rabbit_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbit
      run: |
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp_client
      run: |
        docker run \
          --env project=amqp_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp10_client
      run: |
        docker run \
          --env project=amqp10_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp10_common
      run: |
        docker run \
          --env project=amqp10_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_amqp1_0
      run: |
        docker run \
          --env project=rabbitmq_amqp1_0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_cache
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_http
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_http \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_ldap
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_ldap \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_oauth2
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_oauth2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_mechanism_ssl
      run: |
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_aws
      run: |
        docker run \
          --env project=rabbitmq_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_cli
      run: |
        docker run \
          --env project=rabbitmq_cli \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_consistent_hash_exchange
      run: |
        docker run \
          --env project=rabbitmq_consistent_hash_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_event_exchange
      run: |
        docker run \
          --env project=rabbitmq_event_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_federation
      run: |
        docker run \
          --env project=rabbitmq_federation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_federation_management
      run: |
        docker run \
          --env project=rabbitmq_federation_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_jms_topic_exchange
      run: |
        docker run \
          --env project=rabbitmq_jms_topic_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_management
      run: |
        docker run \
          --env project=rabbitmq_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_management_agent
      run: |
        docker run \
          --env project=rabbitmq_management_agent \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_mqtt
      run: |
        docker run \
          --env project=rabbitmq_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_common
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_aws
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_k8s
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_k8s \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_consul
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_consul \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_etcd
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_etcd \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_prometheus
      run: |
        docker run \
          --env project=rabbitmq_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_random_exchange
      run: |
        docker run \
          --env project=rabbitmq_random_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_recent_history_exchange
      run: |
        docker run \
          --env project=rabbitmq_recent_history_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_sharding
      run: |
        docker run \
          --env project=rabbitmq_sharding \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_shovel
      run: |
        docker run \
          --env project=rabbitmq_shovel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_shovel_management
      run: |
        docker run \
          --env project=rabbitmq_shovel_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_stomp
      run: |
        docker run \
          --env project=rabbitmq_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_stream
      run: |
        docker run \
          --env project=rabbitmq_stream \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_stream_management
      run: |
        docker run \
          --env project=rabbitmq_stream_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_stream_prometheus
      run: |
        docker run \
          --env project=rabbitmq_stream_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_top
      run: |
        docker run \
          --env project=rabbitmq_top \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_tracing
      run: |
        docker run \
          --env project=rabbitmq_tracing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_trust_store
      run: |
        docker run \
          --env project=rabbitmq_trust_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_dispatch
      run: |
        docker run \
          --env project=rabbitmq_web_dispatch \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_mqtt
      run: |
        docker run \
          --env project=rabbitmq_web_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_mqtt_examples
      run: |
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_stomp
      run: |
        docker run \
          --env project=rabbitmq_web_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_stomp_examples
      run: |
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/xref.sh
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=xref \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ci/scripts:/workspace/rabbitmq/ci/scripts \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/collect.sh
  dialyze:
    name: dialyze
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD DIALYZE START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: eu.gcr.io
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
    - name: PULL IMAGE
      run: |
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.1
    - name: RUN DIALYZE rabbit_common
      run: |
        docker run \
          --env project=rabbit_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbit
      run: |
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE amqp10_client
      run: |
        docker run \
          --env project=amqp10_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE amqp10_common
      run: |
        docker run \
          --env project=amqp10_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_auth_mechanism_ssl
      run: |
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_event_exchange
      run: |
        docker run \
          --env project=rabbitmq_event_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_federation_management
      run: |
        docker run \
          --env project=rabbitmq_federation_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_peer_discovery_common
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_random_exchange
      run: |
        docker run \
          --env project=rabbitmq_random_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_shovel_management
      run: |
        docker run \
          --env project=rabbitmq_shovel_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_top
      run: |
        docker run \
          --env project=rabbitmq_top \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_tracing
      run: |
        docker run \
          --env project=rabbitmq_tracing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_web_mqtt_examples
      run: |
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RUN DIALYZE rabbitmq_web_stomp_examples
      run: |
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/dialyze.sh
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=dialyze \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ci/scripts:/workspace/rabbitmq/ci/scripts \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.1 \
          ci/scripts/collect.sh
  rabbit_common:
    name: rabbit_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbit_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbit_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbit:
    name: rabbit
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbit-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  amqp_client:
    name: amqp_client
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp_client-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  amqp10_client:
    name: amqp10_client
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp10_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp10_client-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  amqp10_common:
    name: amqp10_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp10_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp10_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_amqp1_0:
    name: rabbitmq_amqp1_0
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_amqp1_0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_amqp1_0-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_cache:
    name: rabbitmq_auth_backend_cache
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_cache-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_http:
    name: rabbitmq_auth_backend_http
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_http \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_http-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_ldap:
    name: rabbitmq_auth_backend_ldap
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_ldap \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_ldap-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_oauth2:
    name: rabbitmq_auth_backend_oauth2
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_oauth2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_oauth2-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_mechanism_ssl:
    name: rabbitmq_auth_mechanism_ssl
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_mechanism_ssl-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_aws:
    name: rabbitmq_aws
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_aws-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_cli:
    name: rabbitmq_cli
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir broker-logs && chmod 777 broker-logs
        docker run \
          --env project=rabbitmq_cli \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/broker-logs:/workspace/broker-logs \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/rabbitmq_cli.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_cli-broker-logs
        path: broker-logs/broker-logs.tar.xz
  rabbitmq_consistent_hash_exchange:
    name: rabbitmq_consistent_hash_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_consistent_hash_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_consistent_hash_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_event_exchange:
    name: rabbitmq_event_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_event_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_event_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_federation:
    name: rabbitmq_federation
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_federation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_federation-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_federation_management:
    name: rabbitmq_federation_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_federation_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_federation_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_jms_topic_exchange:
    name: rabbitmq_jms_topic_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_jms_topic_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_jms_topic_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_management:
    name: rabbitmq_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_management_agent:
    name: rabbitmq_management_agent
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_management_agent \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_management_agent-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_mqtt:
    name: rabbitmq_mqtt
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_mqtt-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_common:
    name: rabbitmq_peer_discovery_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_aws:
    name: rabbitmq_peer_discovery_aws
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: PREPARE TERRAFORM SECRETS
      run: |
        mkdir terraform && chmod 777 terraform
        echo "${{ secrets.TERRAFORM_SSH_KEY }}" > terraform/id_rsa_terraform
        echo "${{ secrets.TERRAFORM_SSH_KEY_PUB }}" > terraform/id_rsa_terraform.pub
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --env ERLANG_VERSION=23.1 \
          --env AWS_ACCESS_KEY_ID=${{ secrets.CONCOURSE_AWS_ACCESS_KEY_ID }} \
          --env AWS_SECRET_ACCESS_KEY=${{ secrets.CONCOURSE_AWS_SECRET_ACCESS_KEY }} \
          --env SSH_KEY=/workspace/terraform/id_rsa_terraform \
          --volume ${PWD}/terraform:/workspace/terraform \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_aws-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_k8s:
    name: rabbitmq_peer_discovery_k8s
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_k8s \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_k8s-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_consul:
    name: rabbitmq_peer_discovery_consul
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_consul \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_consul-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_etcd:
    name: rabbitmq_peer_discovery_etcd
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_etcd \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_etcd-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_prometheus:
    name: rabbitmq_prometheus
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_prometheus-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_random_exchange:
    name: rabbitmq_random_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_random_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_random_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_recent_history_exchange:
    name: rabbitmq_recent_history_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_recent_history_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_recent_history_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_sharding:
    name: rabbitmq_sharding
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_sharding \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_sharding-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_shovel:
    name: rabbitmq_shovel
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_shovel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_shovel-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_shovel_management:
    name: rabbitmq_shovel_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_shovel_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_shovel_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_stomp:
    name: rabbitmq_stomp
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_stomp-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_stream:
    name: rabbitmq_stream
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_stream \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_stream-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_stream_management:
    name: rabbitmq_stream_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_stream_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_stream_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_stream_prometheus:
    name: rabbitmq_stream_prometheus
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_stream_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_stream_prometheus-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_top:
    name: rabbitmq_top
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_top \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_top-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_tracing:
    name: rabbitmq_tracing
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_tracing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_tracing-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_trust_store:
    name: rabbitmq_trust_store
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_trust_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_trust_store-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_dispatch:
    name: rabbitmq_web_dispatch
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_dispatch \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_dispatch-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_mqtt:
    name: rabbitmq_web_mqtt
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_mqtt-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_mqtt_examples:
    name: rabbitmq_web_mqtt_examples
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_mqtt_examples-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_stomp:
    name: rabbitmq_web_stomp
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_stomp-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_stomp_examples:
    name: rabbitmq_web_stomp_examples
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_stomp_examples-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  finish:
    name: finish
    needs:
    - prepare
    - xref
    - dialyze
    - rabbit_common
    - rabbit
    - amqp_client
    - amqp10_client
    - amqp10_common
    - rabbitmq_amqp1_0
    - rabbitmq_auth_backend_cache
    - rabbitmq_auth_backend_http
    - rabbitmq_auth_backend_ldap
    - rabbitmq_auth_backend_oauth2
    - rabbitmq_auth_mechanism_ssl
    - rabbitmq_aws
    - rabbitmq_cli
    - rabbitmq_consistent_hash_exchange
    - rabbitmq_event_exchange
    - rabbitmq_federation
    - rabbitmq_federation_management
    - rabbitmq_jms_topic_exchange
    - rabbitmq_management
    - rabbitmq_management_agent
    - rabbitmq_mqtt
    - rabbitmq_peer_discovery_common
    - rabbitmq_peer_discovery_aws
    - rabbitmq_peer_discovery_k8s
    - rabbitmq_peer_discovery_consul
    - rabbitmq_peer_discovery_etcd
    - rabbitmq_prometheus
    - rabbitmq_random_exchange
    - rabbitmq_recent_history_exchange
    - rabbitmq_sharding
    - rabbitmq_shovel
    - rabbitmq_shovel_management
    - rabbitmq_stomp
    - rabbitmq_stream
    - rabbitmq_stream_management
    - rabbitmq_stream_prometheus
    - rabbitmq_top
    - rabbitmq_tracing
    - rabbitmq_trust_store
    - rabbitmq_web_dispatch
    - rabbitmq_web_mqtt
    - rabbitmq_web_mqtt_examples
    - rabbitmq_web_stomp
    - rabbitmq_web_stomp_examples
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'') && (success() || failure())'
    steps:
    - uses: technote-space/workflow-conclusion-action@v1
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - uses: actions/cache@v2
      with:
        key: erlang-23.1-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RECORD BUILD FINISH
      run: |
        echo -n "${{ env.WORKFLOW_CONCLUSION }}" > conclusion

        gsutil cp conclusion \
          'gs://monorepo_github_actions_conclusions/${{ github.sha }}/${{ github.workflow }}'

        docker run \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env BUILD_START=${{ needs.prepare.outputs.build_start }} \
          --env BUILD_RESULT=${{ env.WORKFLOW_CONCLUSION }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.1-rabbitmq-${{ github.sha }} \
          ci/scripts/finish.sh
